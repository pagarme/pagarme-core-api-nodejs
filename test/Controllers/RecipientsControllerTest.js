/**
 * PagarmeCoreApiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.RecipientsController;
const GetTransferResponse = testerlib.GetTransferResponse;
const GetRecipientResponse = testerlib.GetRecipientResponse;
const UpdateMetadataRequest = testerlib.UpdateMetadataRequest;
const CreateTransferRequest = testerlib.CreateTransferRequest;
const UpdateAutomaticAnticipationSettingsRequest = testerlib.UpdateAutomaticAnticipationSettingsRequest;
const GetBalanceResponse = testerlib.GetBalanceResponse;
const ListAnticipationResponse = testerlib.ListAnticipationResponse;
const GetWithdrawResponse = testerlib.GetWithdrawResponse;
const CreateWithdrawRequest = testerlib.CreateWithdrawRequest;
const UpdateRecipientRequest = testerlib.UpdateRecipientRequest;
const GetAnticipationResponse = testerlib.GetAnticipationResponse;
const CreateAnticipationRequest = testerlib.CreateAnticipationRequest;
const UpdateRecipientBankAccountRequest = testerlib.UpdateRecipientBankAccountRequest;
const GetAnticipationLimitResponse = testerlib.GetAnticipationLimitResponse;
const ListRecipientResponse = testerlib.ListRecipientResponse;
const CreateRecipientRequest = testerlib.CreateRecipientRequest;
const ListTransferResponse = testerlib.ListTransferResponse;
const ListWithdrawals = testerlib.ListWithdrawals;
const UpdateTransferSettingsRequest = testerlib.UpdateTransferSettingsRequest;

describe("RecipientsController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Retrieves paginated recipients information
     */
    it("should testTestGetRecipients response", function testTestGetRecipientsTest(done) {
        // parameters for the API call
        let page = null;
        let size = null;

        controller.getRecipients(page, size, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = 'application/json';
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            done();
        }).catch(() => undefined);
    });

    /**
     * GetDefaultRecipient
     */
    it("should testTestGetDefaultRecipient response", function testTestGetDefaultRecipientTest(done) {
        controller.getDefaultRecipient(function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = 'application/json';
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            done();
        }).catch(() => undefined);
    });

});
