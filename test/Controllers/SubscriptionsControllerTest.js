/**
 * PagarmeCoreApiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.SubscriptionsController;
const GetSubscriptionResponse = testerlib.GetSubscriptionResponse;
const UpdateSubscriptionCardRequest = testerlib.UpdateSubscriptionCardRequest;
const GetUsageResponse = testerlib.GetUsageResponse;
const UpdateSubscriptionPaymentMethodRequest = testerlib.UpdateSubscriptionPaymentMethodRequest;
const GetSubscriptionItemResponse = testerlib.GetSubscriptionItemResponse;
const CreateSubscriptionItemRequest = testerlib.CreateSubscriptionItemRequest;
const UpdateSubscriptionAffiliationIdRequest = testerlib.UpdateSubscriptionAffiliationIdRequest;
const ListIncrementsResponse = testerlib.ListIncrementsResponse;
const UpdateSubscriptionDueDaysRequest = testerlib.UpdateSubscriptionDueDaysRequest;
const UpdateSubscriptionStartAtRequest = testerlib.UpdateSubscriptionStartAtRequest;
const GetPeriodResponse = testerlib.GetPeriodResponse;
const GetDiscountResponse = testerlib.GetDiscountResponse;
const ListSubscriptionItemsResponse = testerlib.ListSubscriptionItemsResponse;
const UpdateSubscriptionItemRequest = testerlib.UpdateSubscriptionItemRequest;
const CreateSubscriptionRequest = testerlib.CreateSubscriptionRequest;
const UpdateSubscriptionBillingDateRequest = testerlib.UpdateSubscriptionBillingDateRequest;
const UpdateCurrentCycleEndDateRequest = testerlib.UpdateCurrentCycleEndDateRequest;
const CreateDiscountRequest = testerlib.CreateDiscountRequest;
const ListUsagesResponse = testerlib.ListUsagesResponse;
const UpdateCurrentCycleStatusRequest = testerlib.UpdateCurrentCycleStatusRequest;
const CreateCancelSubscriptionRequest = testerlib.CreateCancelSubscriptionRequest;
const GetIncrementResponse = testerlib.GetIncrementResponse;
const CreateIncrementRequest = testerlib.CreateIncrementRequest;
const UpdateMetadataRequest = testerlib.UpdateMetadataRequest;
const ListDiscountsResponse = testerlib.ListDiscountsResponse;
const UpdateSubscriptionMinimumPriceRequest = testerlib.UpdateSubscriptionMinimumPriceRequest;
const UpdateSubscriptionSplitRequest = testerlib.UpdateSubscriptionSplitRequest;
const ListSubscriptionsResponse = testerlib.ListSubscriptionsResponse;
const ListCyclesResponse = testerlib.ListCyclesResponse;
const GetUsageReportResponse = testerlib.GetUsageReportResponse;

describe("SubscriptionsController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Gets all subscriptions
     */
    it("should testTestGetSubscriptions response", function testTestGetSubscriptionsTest(done) {
        // parameters for the API call
        let page = null;
        let size = null;
        let code = null;
        let billingType = null;
        let customerId = null;
        let planId = null;
        let cardId = null;
        let status = null;
        let nextBillingSince = null;
        let nextBillingUntil = null;
        let createdSince = null;
        let createdUntil = null;

        controller.getSubscriptions(page, size, code, billingType, customerId, planId, cardId, status, nextBillingSince, nextBillingUntil, createdSince, createdUntil, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = 'application/json';
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            done();
        }).catch(() => undefined);
    });

});
